#!/usr/bin/env bash






nonce=$(openssl rand -hex 16)

verbosity="/dev/null"
quietitude="/dev/stdout"
for arg in $@; do

    if [[ $arg == '--verbose' ]]; then
        verbosity="/dev/stdout"
    fi

    if [[ $arg == '--quiet' ]]; then
        quietitude="/dev/null"
    fi

done

# echo $verbosity
# echo $quietitude

here() {
	local here="$(dirname "$(realpath ${BASH_SOURCE[0]})")"
	
	local i="$1"
	while [[ "$i" -gt 0 ]]; do
		if [[ "$i" -gt 100 ]]; then
			i=100
		fi
		((--i))
		here="$(dirname "$here")"
	done
	echo "$here" > /dev/stdout
}






##############################################################################################################################






#   Checks if the argument is a recognized language
case $1 in

    elixir)
        echo "elixir detected" > $verbosity
        lang="elixir"
    ;;


    python)
        echo "python detected" > $verbosity
        lang="python"
    ;;


    rust)
        echo "rust detected" > $verbosity
        lang="rust"
    ;;
    rust-script)
        echo "rust detected" > $verbosity
        lang="rust"
    ;;


    julia)
        echo "julia detected" > $verbosity
        lang="julia"
    ;;

    # matlab|octave)
    #     echo "octave detected" > $verbosity
    #     lang="octave"
    # ;;


    perl)
        echo "perl detected" > $verbosity
        lang="perl"
    ;;


    # R)
    #     echo "R detected" > $verbosity
    #     lang="R"
    # ;;


    # ruby)
    #     echo "ruby detected" > $verbosity
    #     lang="ruby"
    # ;;


    php)
        echo "php detected" > $verbosity
        lang="php"
    ;;


    lua)
        echo "lua detected" > $verbosity
        lang="lua"
    ;;


    deno)
        echo "deno detected" > $verbosity
        lang="deno"
    ;;


    scheme|racket)
        echo "scheme detected" > $verbosity
        lang="racket"
    ;;


    terraform)
        echo "terraform detected" > $verbosity
        lang="terraform"
    ;;


    # ansible)
    #     echo "ansible detected" > $verbosity
    #     lang="ansible"
    # ;;


    make)
        echo "make detected" > $verbosity
        lang="make"
    ;;


    cmake)
        echo "cmake detected" > $verbosity
        lang="cmake"
    ;;


    ninja)
        echo "ninja detected" > $verbosity
        lang="ninja"
    ;;


    # meson)
    #     echo "meson detected" > $verbosity
    #     lang="meson"
    # ;;



    just)
        echo "just detected" > $verbosity
        lang="just"
    ;;


    *)
        echo -e "\n[094m    >><< Unrecognized language...\n[0m"
        exit 1
    ;;

esac


declare snake
if mamba --version > /dev/null; then 
    snake="mamba"
else
    if conda --version > /dev/null; then
        snake="conda"
    else
        echo -e "\n[094m    >><< Conda envs are not supported on the system...\n[0m"
        exit 1
    fi
fi


echo $snake > $verbosity


Instantiation() {
    :   #   Creates a single use conda env with the requested payload

    declare payload
    case $lang in

        elixir)
            payload+="elixir "
        ;;

        python)
            payload+="python=3.11 "
            payload+="pip "
        ;;

        rust)
            payload+="rust-script "
        ;;

        julia)
            payload+="julia "
        ;;

        # octave)
        #     payload+="octave "
        # ;;

        perl)
            payload+="perl "
        ;;

        # R)
        #     payload+="R "
        # ;;

        # ruby)
        #     payload+="ruby "
        # ;;

        php)
            payload+="php "
        ;;

        lua)
            payload+="lua "
        ;;

        deno)
            payload+="deno "
        ;;

        racket)
            payload+="racket "
        ;;

        terraform)
            payload+="terraform "
        ;;

        # ansible)
        #     payload+="ansible "
        # ;;

        make)
            payload+="make "
        ;;

        cmake)
            payload+="cmake "
        ;;

        ninja)
            payload+="ninja "
        ;;

        # meson)
        #     payload+="meson "
        # ;;

        just)
            payload+="just "
        ;;

    esac

    eval "$($snake shell hook --shell bash)"
    $snake create -n $nonce -y --copy $payload &> /dev/null
    $snake activate $nonce
    $snake install -y micromamba pipdeptree $payload &> $verbosity


    if [[ $verbose == '/dev/stdout' ]]; then
    echo "verbosity detected"
        echo -e "\n[094m    Environment created:"
        $snake env list | grep $nonce > $verbose
    fi
}


Reduplication() {
    :   #   Copies the conda env to the port directory and changes the name
    cp -r $HOME/conda/envs/$nonce .
    mv ./$nonce ./$lang
}


Disambiguation() {
    :   #   Removes the single use conda env, leaving only the port version
    $snake env remove -n $nonce -y > /dev/null
}






##############################################################################################################################






main() {

    echo -en "\n[094m    Creating env..." > $quietitude
    Instantiation
    echo -en "\r[094m  âœ“ Creating env...Done\n[0m" > $quietitude


    echo -en "\n[094m    Cloning env..." > $quietitude
    Reduplication
    echo -en "\r[094m  âœ“ Cloning env...Done\n[0m" > $quietitude


    echo -en "\n[094m    Cleaning env..." > $quietitude
    Disambiguation
    echo -en "\r[094m  âœ“ Cleaning env...Done\n[0m" > $quietitude

}; main


#   used for testing if the above worked or not
# synth() {
#     rm -fr ./$1 2> /dev/null
#     ./env-setup $1; $1/bin/$1 --version
# }